import { PluginParameter } from "./PluginParameter";
import { ParameterStepAutomation } from "./ParameterAutomation";
import { IAutomatedPluginParameter } from "./IPluginParameter";
import { IBasePlugin } from "../IBasePlugin";
export declare class ListParameter<T> extends PluginParameter<T> implements IAutomatedPluginParameter<T> {
    private _defaultValue;
    private listOfValues;
    toStringFunc?: (item: T) => string;
    private audioParameter;
    private automation;
    private listIndex;
    constructor(owner: IBasePlugin, name: string, _defaultValue: T, listOfValues: T[], toStringFunc?: (item: T) => string, visibleName?: string, exposed?: boolean);
    private setV;
    private isAutomatable;
    destroy(): void;
    setValue(v: T): T;
    increment(): T;
    decrement(): T;
    addOptionToList(t: T): T[];
    deleteOptionFromList(t: T): T[];
    toString(): string;
    getParameterObject(): {
        value: T;
        options: T[];
        defaultValue: T;
        minimum: number;
        maximum: number;
        visibleName: string;
        type: string;
        name: string;
    };
    getValueAtTimePoint(time: number): any;
    start(time: number, contextTime: number): void;
    stop(contextTime: number): void;
    bindToAudioParam(ap: AudioParam): void;
    get type(): string;
    get defaultValue(): T;
    get listValues(): T[];
    get value(): T;
    set value(v: T);
    get boundAudioParam(): AudioParam;
    get automatable(): boolean;
    get automationPoints(): ParameterStepAutomation<T>;
    get enabled(): boolean;
    set enabled(e: boolean);
}
