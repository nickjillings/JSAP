import { ParameterManager, NumberParameter, StringParameter, ButtonParameter, SwitchParameter, ListParameter, URLParameter, AssetParameter } from "./ParameterManager";
import { PluginInterfaceMessageHub, PluginParameterJSON, PluginParameterJSONEntry, PluginParameterUpdateMessage, PluginStateUpdateMessage, StateLevel } from "./PluginInterfaceMessageHub";
import { PluginFeatureInterface } from "./PluginFeatureInterface/index";
import { LinkedStore } from "../LinkedStore";
import { LinkedStoreInterface } from "./LinkedStoreInterface";
import { IBasePlugin, IBasePluginAssetLoadingProgress, IBasePluginGUIDefinition } from "./IBasePlugin.js";
import { PluginFactory } from "../Factory/PluginFactory";
import { IPluginPrototype } from "../Factory/PluginPrototype";
import { IPluginHost } from "../Factory/IPluginHost";
import { IPluginInstance } from "../Factory/IPluginInstance";
import { Observable } from "rxjs";
import { INestedPluginParameterObject } from "./parameters/IPluginParameter";
export { IBasePlugin, LinkedStoreInterface, INestedPluginParameterObject, ParameterManager, NumberParameter, StringParameter, ButtonParameter, SwitchParameter, ListParameter, URLParameter, AssetParameter, IBasePluginAssetLoadingProgress, PluginParameterUpdateMessage, PluginParameterJSON, PluginParameterJSONEntry, StateLevel, PluginStateUpdateMessage };
export declare abstract class BasePlugin<T extends IPluginInstance<I>, I extends IPluginHost> implements IBasePlugin {
    readonly factory: PluginFactory;
    private pluginOwner;
    readonly prototypeObject: IPluginPrototype<T, I>;
    private inputList;
    private outputList;
    private delaySamples;
    private eventTarget;
    readonly externalInterface: PluginInterfaceMessageHub;
    readonly context: BaseAudioContext;
    readonly featureMap: PluginFeatureInterface;
    readonly parameters: ParameterManager;
    readonly PluginData: LinkedStore;
    readonly sessionDataInterface: LinkedStoreInterface;
    readonly userDataInterface: LinkedStoreInterface;
    readonly trackDataInterface: LinkedStoreInterface;
    readonly pluginDataInterface: LinkedStoreInterface;
    readonly SessionData: LinkedStore;
    readonly UserData: LinkedStore;
    readonly name: string;
    readonly uniqueID: string;
    readonly version: string;
    readonly GUI?: IBasePluginGUIDefinition;
    constructor(factory: PluginFactory, pluginOwner: I, prototypeObject: IPluginPrototype<T, I>);
    start(): void;
    stop(ct?: number): void;
    onloaded(): void;
    onunloaded(): void;
    deconstruct(): void;
    initialise?: () => Promise<void>;
    private deleteIO;
    changeOwner(newOwner: any): void;
    delete(): void;
    destroy(): void;
    addInput(node: AudioNode): AudioNode[];
    deleteInput(node: AudioNode): AudioNode[];
    addOutput(node: AudioNode): AudioNode[];
    deleteOutput(node: AudioNode): AudioNode[];
    setProcessingDelayAsSeconds(seconds: number): number;
    setProcessingDelayAsSamples(samples: number): number;
    connect(dest: AudioNode | AudioParam, output?: number, input?: number): void;
    disconnect(dest?: AudioNode | AudioParam, output?: number, input?: number): void;
    getInputs(): AudioNode[];
    getOutputs(): AudioNode[];
    getParameterNames(): string[];
    getParameterByName(name: string): import("./parameters/IPluginParameter").IPluginBaseParameter;
    getParameterObject(): INestedPluginParameterObject;
    setParameterByName(name: string, value: any, updateInterfaces?: boolean): void;
    setParametersByObject(object: INestedPluginParameterObject, updateInterfaces?: boolean): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    isReadyPromise(): Promise<boolean>;
    loadingProgress$(): Observable<IBasePluginAssetLoadingProgress>;
    get owner(): I;
    get numInputs(): number;
    get numOutputs(): number;
    get numParameters(): number;
    get inputs(): AudioNode[];
    get outputs(): AudioNode[];
    get processingDelayAsSamples(): number;
    set processingDelayAsSamples(samples: number);
    get processingDelayAsSeconds(): number;
    set processingDelayAsSeconds(seconds: number);
    get TrackData(): LinkedStore;
}
